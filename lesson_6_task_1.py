"""
1. Подсчитать, сколько было выделено памяти под переменные в ранее
разработанных программах в рамках первых трех уроков. Проанализировать
результат и определить программы с наиболее эффективным использованием памяти.
Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
b. написать 3 варианта кода (один у вас уже есть);
проанализировать 3 варианта и выбрать оптимальный;
c. результаты анализа (количество занятой памяти в вашей среде разработки)
вставить в виде комментариев в файл с кодом. Не забудьте указать версию и
разрядность вашей ОС и интерпретатора Python;
d. написать общий вывод: какой из трёх вариантов лучше и почему.
"""
import sys

#1
def my_gen(limit):
    x = 1
    while x <= limit:
        yield x
        x += 1

a = my_gen(100)
x = 0
for i in a:
    x += i
print(type(a))
print(f'Использовано памяти {sys.getsizeof(x) + sys.getsizeof(a)}')

#2
b = [i for i in range(1, 100)]
y = 0
for i in a:
    y += i
print(type(b))
print(f'Использовано памяти {sys.getsizeof(y) + sys.getsizeof(b)}')

#3
c = {i for i in range(1, 100)}
z = 0
for i in a:
    z += i
print(type(c))
print(f'Использовано памяти {sys.getsizeof(z) + sys.getsizeof(c)}')


"""
print(sys.version, sys.winver)
3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)] 3.8
1 вариант использует меньше памяти за счет того что в нем реализован 
генератор и он не заполняется веми элементами сразу а элементы в цикле 
генерируются поочередно.
2. В данном случае создается набор с элементами в результате чего памяти 
расходуется больше чем в первом варианте.
3 вариант использует больше всех памяти из за того что там создается set 
который реализован на базе хеш таблицы. В данном случае память расходуется 
на реализацию и хранение самой таблицы.
"""
